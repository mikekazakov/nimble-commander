# https://clang.llvm.org/extra/clang-tidy/checks/list.html

Checks: >
  -*,
  -clang-diagnostic-c99-designator,
  misc-confusable-identifiers,
  misc-const-correctness,
  misc-coroutine-hostile-raii,
  misc-definitions-in-headers,
  misc-header-include-cycle,
  # misc-include-cleaner, <-- flaky
  misc-misleading-bidirectional,
  misc-misleading-identifier,
  # misc-misplaced-const, <-- controversial, produces false positives
  misc-new-delete-overloads,
  # misc-no-recursion, <-- controversial
  misc-non-copyable-objects,
  misc-non-private-member-variables-in-classes,
  misc-redundant-expression,
  misc-static-assert,
  misc-throw-by-value-catch-by-reference,
  misc-unconventional-assign-operator,
  misc-uniqueptr-reset-release,
  misc-unused-alias-decls,
  misc-unused-parameters,
  misc-unused-using-decls,
  # misc-use-anonymous-namespace, <-- controversial, 'static' is fine
  misc-use-internal-linkage,
  modernize-avoid-bind,
  # modernize-avoid-c-arrays, <-- not yet looked into
  modernize-concat-nested-namespaces,
  modernize-deprecated-headers,
  modernize-deprecated-ios-base-aliases,
  modernize-loop-convert,
  modernize-macro-to-enum,
  modernize-make-shared,
  modernize-make-unique,
  modernize-min-max-use-initializer-list,
  # modernize-pass-by-value, <-- controversial, changes the API
  modernize-raw-string-literal,
  modernize-redundant-void-arg,
  modernize-replace-auto-ptr,
  modernize-replace-disallow-copy-and-assign-macro,
  modernize-replace-random-shuffle,
  modernize-return-braced-init-list,
  modernize-shrink-to-fit,
  modernize-type-traits,
  modernize-unary-static-assert,
  # modernize-use-auto, <-- controversial, not some cases explicit types greatly improves readability
  modernize-use-bool-literals,
  modernize-use-constraints,
  modernize-use-default-member-init,
  modernize-use-designated-initializers,
  modernize-use-emplace,
  modernize-use-equals-default,
  modernize-use-equals-delete,
  modernize-use-nodiscard,
  modernize-use-noexcept,
  modernize-use-nullptr,
  modernize-use-override,
  modernize-use-ranges,
  modernize-use-starts-ends-with,
  modernize-use-std-format,
  modernize-use-std-numbers,
  modernize-use-std-print,
  # modernize-use-trailing-return-type, <-- makes it harder to read the source code
  modernize-use-transparent-functors,
  modernize-use-uncaught-exceptions,
  modernize-use-using,
  performance-avoid-endl,
  performance-enum-size,
  performance-faster-string-find,
  performance-for-range-copy,
  performance-implicit-conversion-in-loop,
  performance-inefficient-algorithm,
  performance-inefficient-string-concatenation,
  performance-inefficient-vector-operation,
  performance-move-const-arg,
  performance-move-constructor-init,
  performance-no-automatic-move,
  performance-no-int-to-ptr,
  performance-noexcept-destructor,
  performance-noexcept-move-constructor,
  performance-noexcept-swap,
  performance-trivially-destructible,
  performance-type-promotion-in-math-fn,
  performance-unnecessary-copy-initialization,
  # performance-unnecessary-value-param <-- a bit too dangerous to apply blindly, need to carefully sift through
  portability-restrict-system-includes,
  portability-simd-intrinsics,
  portability-std-allocator-const,
  portability-template-virtual-member-function,
  readability-avoid-const-params-in-decls,
  readability-avoid-nested-conditional-operator,
  readability-avoid-return-with-void-value,
  # readability-avoid-unconditional-preprocessor-if, <-- sometimes is still usefull, can't blanketly disallow
  # readability-braces-around-statements, <-- maybe a good idea, but is a rather huge change to apply
  readability-const-return-type,
  readability-container-contains,
  readability-container-data-pointer,
  readability-container-size-empty,
  readability-convert-member-functions-to-static,
  readability-delete-null-pointer,
  readability-duplicate-include,
  # readability-else-after-return, <-- a bit controversial, leave for now
  readability-enum-initial-value,
  # readability-function-cognitive-complexity, <-- unrealistic
  readability-function-size,
  # readability-identifier-length, <-- would be nice some day, but that's massive
  # readability-identifier-naming, <-- would be nice some day, but that's massive
  readability-implicit-bool-conversion,
  readability-inconsistent-declaration-parameter-name,
  readability-isolate-declaration,
  # readability-magic-numbers,            <-- large
  readability-make-member-function-const,
  readability-math-missing-parentheses,
  readability-misleading-indentation,
  readability-misplaced-array-index,
  readability-named-parameter,
  # readability-non-const-parameter,      <-- would be nice some day, but that's massive
  # readability-operators-representation, <-- not sure about the benefits
  # readability-qualified-auto,           <-- would be nice some day, but that's massive
  readability-redundant-access-specifiers,
  readability-redundant-casting,
  readability-redundant-control-flow,
  readability-redundant-declaration,
  readability-redundant-function-ptr-dereference,
  readability-redundant-inline-specifier,
  readability-redundant-member-init,
  readability-redundant-preprocessor,
  readability-redundant-smartptr-get,
  readability-redundant-string-cstr,
  readability-redundant-string-init,
  readability-reference-to-constructed-temporary,
  readability-simplify-boolean-expr,
  readability-simplify-subscript-expr,
  readability-static-accessed-through-instance,
  readability-static-definition-in-anonymous-namespace,
  readability-string-compare,
  readability-suspicious-call-argument,
  readability-uniqueptr-delete-release,
  # readability-uppercase-literal-suffix, <-- controversial
  readability-use-anyofallof,
  readability-use-std-min-max,

CheckOptions:
  - key:    modernize-loop-convert.MinConfidence
    value:  safe
  - key:    modernize-loop-convert.UseCxx20ReverseRanges
    value:  true
  - key:    modernize-use-std-format.ReplacementFormatFunction
    value:  fmt::format
  - key:    modernize-use-std-format.FormatHeader
    value:  <fmt/format.h>
  - key:    modernize-use-std-print.ReplacementPrintFunction
    value:  fmt::print
  - key:    modernize-use-std-print.ReplacementPrintlnFunction
    value:  fmt::println
  - key:    modernize-use-std-print.PrintHeader
    value:  <fmt/format.h>
  - key:    misc-non-private-member-variables-in-classes.IgnoreClassesWithAllMemberVariablesBeingPublic
    value:  true
  - key:    misc-header-include-cycle.IgnoredFilesList
    value:  MMTabBarView.h;MMAttachedTabBarButton.h;curl.h

ExtraArgs:
- -Wno-unknown-pragmas
- -Wno-missing-field-initializers
# breaks on swift interop otherwise
- -Wno-explicit-specialization-storage-class

FormatStyle: file
