// Copyright (C) 2013-2021 Michael Kazakov. Subject to GNU General Public License version 3.
#include <cassert>
#include <cstdlib>

#include <Utility/Encodings.h>

using namespace encodings;

// clang-format off
static const unsigned short g_CP_OEM437_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00A2,0x00A3,0x00A5,0x20A7,0x0192, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM737_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F,0x03A0, /*80*/
    /*90*/ 0x03A1,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8, /*90*/
    /*A0*/ 0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,0x03C0,0x03C1,0x03C3,0x03C2,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03C9,0x03AC,0x03AD,0x03AE,0x03CA,0x03AF,0x03CC,0x03CD,0x03CB,0x03CE,0x0386,0x0388,0x0389,0x038A,0x038C,0x038E, /*E0*/
    /*F0*/ 0x038F,0x00B1,0x2265,0x2264,0x03AA,0x03AB,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM775_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0106,0x00FC,0x00E9,0x0101,0x00E4,0x0123,0x00E5,0x0107,0x0142,0x0113,0x0156,0x0157,0x012B,0x0179,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x014D,0x00F6,0x0122,0x00A2,0x015A,0x015B,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x00D7,0x00A4, /*90*/
    /*A0*/ 0x0100,0x012A,0x00F3,0x017B,0x017C,0x017A,0x201D,0x00A6,0x00A9,0x00AE,0x00AC,0x00BD,0x00BC,0x0141,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x0104,0x010C,0x0118,0x0116,0x2563,0x2551,0x2557,0x255D,0x012E,0x0160,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x0172,0x016A,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x017D, /*C0*/
    /*D0*/ 0x0105,0x010D,0x0119,0x0117,0x012F,0x0161,0x0173,0x016B,0x017E,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x00D3,0x00DF,0x014C,0x0143,0x00F5,0x00D5,0x00B5,0x0144,0x0136,0x0137,0x013B,0x013C,0x0146,0x0112,0x0145,0x2019, /*E0*/
    /*F0*/ 0x00AD,0x00B1,0x201C,0x00BE,0x00B6,0x00A7,0x00F7,0x201E,0x00B0,0x2219,0x00B7,0x00B9,0x00B3,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM850_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x00D7,0x0192, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x00AE,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x00C0,0x00A9,0x2563,0x2551,0x2557,0x255D,0x00A2,0x00A5,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x00E3,0x00C3,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4, /*C0*/
    /*D0*/ 0x00F0,0x00D0,0x00CA,0x00CB,0x00C8,0x0131,0x00CD,0x00CE,0x00CF,0x2518,0x250C,0x2588,0x2584,0x00A6,0x00CC,0x2580, /*D0*/
    /*E0*/ 0x00D3,0x00DF,0x00D4,0x00D2,0x00F5,0x00D5,0x00B5,0x00FE,0x00DE,0x00DA,0x00DB,0x00D9,0x00FD,0x00DD,0x00AF,0x00B4, /*E0*/
    /*F0*/ 0x00AD,0x00B1,0x2017,0x00BE,0x00B6,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x00B7,0x00B9,0x00B3,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM851_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x0386,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x0388,0x00C4,0x0389, /*80*/
    /*90*/ 0x038A,0x0000,0x038C,0x00F4,0x00F6,0x038E,0x00FB,0x00F9,0x038F,0x00D6,0x00DC,0x03AC,0x00A3,0x03AD,0x03AE,0x03AF, /*90*/
    /*A0*/ 0x03CA,0x0390,0x03CC,0x03CD,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x00BD,0x0398,0x0399,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x039A,0x039B,0x039C,0x039D,0x2563,0x2551,0x2557,0x255D,0x039E,0x039F,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x03A0,0x03A1,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x03A3, /*C0*/
    /*D0*/ 0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03B1,0x03B2,0x03B3,0x2518,0x250C,0x2588,0x2584,0x03B4,0x03B5,0x2580, /*D0*/
    /*E0*/ 0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,0x03C0,0x03C1,0x03C3,0x03C2,0x03C4,0x0384, /*E0*/
    /*F0*/ 0x00AD,0x00B1,0x03C5,0x03C6,0x03C7,0x00A7,0x03C8,0x0385,0x00B0,0x00A8,0x03C9,0x03CB,0x03B0,0x03CE,0x25A0,0x00A0, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};


static const unsigned short g_CP_OEM852_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x016F,0x0107,0x00E7,0x0142,0x00EB,0x0150,0x0151,0x00EE,0x0179,0x00C4,0x0106, /*80*/
    /*90*/ 0x00C9,0x0139,0x013A,0x00F4,0x00F6,0x013D,0x013E,0x015A,0x015B,0x00D6,0x00DC,0x0164,0x0165,0x0141,0x00D7,0x010D, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x0104,0x0105,0x017D,0x017E,0x0118,0x0119,0x00AC,0x017A,0x010C,0x015F,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x011A,0x015E,0x2563,0x2551,0x2557,0x255D,0x017B,0x017C,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x0102,0x0103,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4, /*C0*/
    /*D0*/ 0x0111,0x0110,0x010E,0x00CB,0x010F,0x0147,0x00CD,0x00CE,0x011B,0x2518,0x250C,0x2588,0x2584,0x0162,0x016E,0x2580, /*D0*/
    /*E0*/ 0x00D3,0x00DF,0x00D4,0x0143,0x0144,0x0148,0x0160,0x0161,0x0154,0x00DA,0x0155,0x0170,0x00FD,0x00DD,0x0163,0x00B4, /*E0*/
    /*F0*/ 0x00AD,0x02DD,0x02DB,0x02C7,0x02D8,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x02D9,0x0171,0x0158,0x0159,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM855_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0452,0x0402,0x0453,0x0403,0x0451,0x0401,0x0454,0x0404,0x0455,0x0405,0x0456,0x0406,0x0457,0x0407,0x0458,0x0408, /*80*/
    /*90*/ 0x0459,0x0409,0x045A,0x040A,0x045B,0x040B,0x045C,0x040C,0x045E,0x040E,0x045F,0x040F,0x044E,0x042E,0x044A,0x042A, /*90*/
    /*A0*/ 0x0430,0x0410,0x0431,0x0411,0x0446,0x0426,0x0434,0x0414,0x0435,0x0415,0x0444,0x0424,0x0433,0x0413,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x0445,0x0425,0x0438,0x0418,0x2563,0x2551,0x2557,0x255D,0x0439,0x0419,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x043A,0x041A,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4, /*C0*/
    /*D0*/ 0x043B,0x041B,0x043C,0x041C,0x043D,0x041D,0x043E,0x041E,0x043F,0x2518,0x250C,0x2588,0x2584,0x041F,0x044F,0x2580, /*D0*/
    /*E0*/ 0x042F,0x0440,0x0420,0x0441,0x0421,0x0442,0x0422,0x0443,0x0423,0x0436,0x0416,0x0432,0x0412,0x044C,0x042C,0x2116, /*E0*/
    /*F0*/ 0x00AD,0x044B,0x042B,0x0437,0x0417,0x0448,0x0428,0x044D,0x042D,0x0449,0x0429,0x0447,0x0427,0x00A7,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM857_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x0131,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x0130,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x015E,0x015F, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x011E,0x011F,0x00BF,0x00AE,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x00C1,0x00C2,0x00C0,0x00A9,0x2563,0x2551,0x2557,0x255D,0x00A2,0x00A5,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x00E3,0x00C3,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x00A4, /*C0*/
    /*D0*/ 0x00BA,0x00AA,0x00CA,0x00CB,0x00C8,0x20AC,0x00CD,0x00CE,0x00CF,0x2518,0x250C,0x2588,0x2584,0x00A6,0x00CC,0x2580, /*D0*/
    /*E0*/ 0x00D3,0x00DF,0x00D4,0x00D2,0x00F5,0x00D5,0x00B5,0x0000,0x00D7,0x00DA,0x00DB,0x00D9,0x00EC,0x00FF,0x00AF,0x00B4, /*E0*/
    /*F0*/ 0x00AD,0x00B1,0x0000,0x00BE,0x00B6,0x00A7,0x00F7,0x00B8,0x00B0,0x00A8,0x00B7,0x00B9,0x00B3,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM860_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E3,0x00E0,0x00C1,0x00E7,0x00EA,0x00CA,0x00E8,0x00CD,0x00D4,0x00EC,0x00C3,0x00C2, /*80*/
    /*90*/ 0x00C9,0x00C0,0x00C8,0x00F4,0x00F5,0x00F2,0x00DA,0x00F9,0x00CC,0x00D5,0x00DC,0x00A2,0x00A3,0x00D9,0x20A7,0x00D3, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x00D2,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM861_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00D0,0x00F0,0x00DE,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00FE,0x00FB,0x00DD,0x00FD,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x20A7,0x0192, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00C1,0x00CD,0x00D3,0x00DA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM862_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF, /*80*/
    /*90*/ 0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,0x05E8,0x05E9,0x05EA,0x00A2,0x00A3,0x00A5,0x20A7,0x0192, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM863_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00C2,0x00E0,0x00B6,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x2017,0x00C0,0x00A7, /*80*/
    /*90*/ 0x00C9,0x00C8,0x00CA,0x00F4,0x00CB,0x00CF,0x00FB,0x00F9,0x00A4,0x00D4,0x00DC,0x00A2,0x00A3,0x00D9,0x00DB,0x0192, /*90*/
    /*A0*/ 0x00A6,0x00B4,0x00F3,0x00FA,0x00A8,0x00B8,0x00B3,0x00AF,0x00CE,0x2310,0x00AC,0x00BD,0x00BC,0x00BE,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM864_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00B0,0x00B7,0x2219,0x221A,0x2592,0x2500,0x2502,0x253C,0x2524,0x252C,0x251C,0x2534,0x2510,0x250C,0x2514,0x2518, /*80*/
    /*90*/ 0x03B2,0x221E,0x03C6,0x00B1,0x00BD,0x00BC,0x2248,0x00AB,0x00BB,0xFEF7,0xFEF8,0x0000,0x0000,0xFEFB,0xFEFC,0x0000, /*90*/
    /*A0*/ 0x00A0,0x00AD,0xFE82,0x00A3,0x00A4,0xFE84,0x0000,0x20AC,0xFE8E,0xFE8F,0xFE95,0xFE99,0x060C,0xFE9D,0xFEA1,0xFEA5, /*A0*/
    /*B0*/ 0x0660,0x0661,0x0662,0x0663,0x0664,0x0665,0x0666,0x0667,0x0668,0x0669,0xFED1,0x061B,0xFEB1,0xFEB5,0xFEB9,0x061F, /*B0*/
    /*C0*/ 0x00A2,0xFE80,0xFE81,0xFE83,0xFE85,0xFECA,0xFE8B,0xFE8D,0xFE91,0xFE93,0xFE97,0xFE9B,0xFE9F,0xFEA3,0xFEA7,0xFEA9, /*C0*/
    /*D0*/ 0xFEAB,0xFEAD,0xFEAF,0xFEB3,0xFEB7,0xFEBB,0xFEBF,0xFEC1,0xFEC5,0xFECB,0xFECF,0x00A6,0x00AC,0x00F7,0x00D7,0xFEC9, /*D0*/
    /*E0*/ 0x0640,0xFED3,0xFED7,0xFEDB,0xFEDF,0xFEE3,0xFEE7,0xFEEB,0xFEED,0xFEEF,0xFEF3,0xFEBD,0xFECC,0xFECE,0xFECD,0xFEE1, /*E0*/
    /*F0*/ 0xFE7D,0x0651,0xFEE5,0xFEE9,0xFEEC,0xFEF0,0xFEF2,0xFED0,0xFED5,0xFEF5,0xFEF6,0xFEDD,0xFED9,0xFEF1,0x25A0,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM865_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C7,0x00FC,0x00E9,0x00E2,0x00E4,0x00E0,0x00E5,0x00E7,0x00EA,0x00EB,0x00E8,0x00EF,0x00EE,0x00EC,0x00C4,0x00C5, /*80*/
    /*90*/ 0x00C9,0x00E6,0x00C6,0x00F4,0x00F6,0x00F2,0x00FB,0x00F9,0x00FF,0x00D6,0x00DC,0x00F8,0x00A3,0x00D8,0x20A7,0x0192, /*90*/
    /*A0*/ 0x00E1,0x00ED,0x00F3,0x00FA,0x00F1,0x00D1,0x00AA,0x00BA,0x00BF,0x2310,0x00AC,0x00BD,0x00BC,0x00A1,0x00AB,0x00A4, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x03B1,0x00DF,0x0393,0x03C0,0x03A3,0x03C3,0x00B5,0x03C4,0x03A6,0x0398,0x03A9,0x03B4,0x221E,0x03C6,0x03B5,0x2229, /*E0*/
    /*F0*/ 0x2261,0x00B1,0x2265,0x2264,0x2320,0x2321,0x00F7,0x2248,0x00B0,0x2219,0x00B7,0x221A,0x207F,0x00B2,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM866_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F, /*80*/
    /*90*/ 0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F, /*90*/
    /*A0*/ 0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x2561,0x2562,0x2556,0x2555,0x2563,0x2551,0x2557,0x255D,0x255C,0x255B,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x255E,0x255F,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x2567, /*C0*/
    /*D0*/ 0x2568,0x2564,0x2565,0x2559,0x2558,0x2552,0x2553,0x256B,0x256A,0x2518,0x250C,0x2588,0x2584,0x258C,0x2590,0x2580, /*D0*/
    /*E0*/ 0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F, /*E0*/
    /*F0*/ 0x0401,0x0451,0x0404,0x0454,0x0407,0x0457,0x040E,0x045E,0x00B0,0x2219,0x00B7,0x221A,0x2116,0x00A4,0x25A0,0x00A0  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_OEM869_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0386,0x0000,0x00B7,0x00AC,0x00A6,0x2018,0x2019,0x0388,0x2015,0x0389, /*80*/
    /*90*/ 0x038A,0x03AA,0x038C,0x0000,0x0000,0x038E,0x03AB,0x00A9,0x038F,0x00B2,0x00B3,0x03AC,0x00A3,0x03AD,0x03AE,0x03AF, /*90*/
    /*A0*/ 0x03CA,0x0390,0x03CC,0x03CD,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x00BD,0x0398,0x0399,0x00AB,0x00BB, /*A0*/
    /*B0*/ 0x2591,0x2592,0x2593,0x2502,0x2524,0x039A,0x039B,0x039C,0x039D,0x2563,0x2551,0x2557,0x255D,0x039E,0x039F,0x2510, /*B0*/
    /*C0*/ 0x2514,0x2534,0x252C,0x251C,0x2500,0x253C,0x03A0,0x03A1,0x255A,0x2554,0x2569,0x2566,0x2560,0x2550,0x256C,0x03A3, /*C0*/
    /*D0*/ 0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03B1,0x03B2,0x03B3,0x2518,0x250C,0x2588,0x2584,0x03B4,0x03B5,0x2580, /*D0*/
    /*E0*/ 0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF,0x03C0,0x03C1,0x03C3,0x03C2,0x03C4,0x0384, /*E0*/
    /*F0*/ 0x00AD,0x00B1,0x03C5,0x03C6,0x03C7,0x00A7,0x03C8,0x0385,0x00B0,0x00A8,0x03C9,0x03CB,0x03B0,0x03CE,0x25A0,0x00A0, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1250_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,0x0000,0x2030,0x0160,0x2039,0x015A,0x0164,0x017D,0x0179, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0000,0x2122,0x0161,0x203A,0x015B,0x0165,0x017E,0x017A, /*90*/
    /*A0*/ 0x00A0,0x02C7,0x02D8,0x0141,0x00A4,0x0104,0x00A6,0x00A7,0x00A8,0x00A9,0x015E,0x00AB,0x00AC,0x00AD,0x00AE,0x017B, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x02DB,0x0142,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x0105,0x015F,0x00BB,0x013D,0x02DD,0x013E,0x017C, /*B0*/
    /*C0*/ 0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E, /*C0*/
    /*D0*/ 0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF, /*D0*/
    /*E0*/ 0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F, /*E0*/
    /*F0*/ 0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1251_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x0402,0x0403,0x201A,0x0453,0x201F,0x2026,0x2020,0x2021,0x20AC,0x2030,0x0409,0x2039,0x040A,0x040C,0x040B,0x040F, /*80*/
    /*90*/ 0x0452,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0000,0x2122,0x0459,0x203A,0x045A,0x045C,0x045B,0x045F, /*90*/
    /*A0*/ 0x00A0,0x040E,0x045E,0x0408,0x00A4,0x0490,0x00A6,0x00A7,0x0401,0x00A9,0x0404,0x00AB,0x00AC,0x00AD,0x00AE,0x0407, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x0406,0x0456,0x0491,0x00B5,0x00B6,0x00B7,0x0451,0x2116,0x0454,0x00BB,0x0458,0x0405,0x0455,0x0457, /*B0*/
    /*C0*/ 0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F, /*C0*/
    /*D0*/ 0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F, /*D0*/
    /*E0*/ 0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F, /*E0*/
    /*F0*/ 0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1252_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x017D,0x0000, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x017E,0x0178, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1253_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x0000,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0000,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0385,0x0386,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x0000,0x00AB,0x00AC,0x00AD,0x00AE,0x2015, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x00B5,0x00B6,0x00B7,0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F, /*B0*/
    /*C0*/ 0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F, /*C0*/
    /*D0*/ 0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF, /*D0*/
    /*E0*/ 0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF, /*E0*/
    /*F0*/ 0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1254_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0160,0x2039,0x0152,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x02DC,0x2122,0x0161,0x203A,0x0153,0x0000,0x0000,0x0178, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1255_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0000,0x2039,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x02DC,0x2122,0x0000,0x203A,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x20AA,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x05B0,0x05B1,0x05B2,0x05B3,0x05B4,0x05B5,0x05B6,0x05B7,0x05B8,0x05B9,0x05BA,0x05BB,0x05BC,0x05BD,0x05BE,0x05BF, /*C0*/
    /*D0*/ 0x05C0,0x05C1,0x05C2,0x05C3,0x05F0,0x05F1,0x05F2,0x05F3,0x05F4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*D0*/
    /*E0*/ 0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF, /*E0*/
    /*F0*/ 0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1256_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x067E,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0679,0x2039,0x0152,0x0686,0x0698,0x0688, /*80*/
    /*90*/ 0x06AF,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x06A9,0x2122,0x0691,0x203A,0x0153,0x200C,0x200D,0x06BA, /*90*/
    /*A0*/ 0x00A0,0x060C,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x06BE,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x061B,0x00BB,0x00BC,0x00BD,0x00BE,0x061F, /*B0*/
    /*C0*/ 0x06C1,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F, /*C0*/
    /*D0*/ 0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x00D7,0x0637,0x0638,0x0639,0x063A,0x0640,0x0641,0x0642,0x0643, /*D0*/
    /*E0*/ 0x00E0,0x0644,0x00E2,0x0645,0x0646,0x0647,0x0648,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x0649,0x064A,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x064B,0x064C,0x064D,0x064E,0x00F4,0x064F,0x0650,0x00F7,0x0651,0x00F9,0x0652,0x00FB,0x00FC,0x200E,0x200F,0x06D2  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1257_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0000,0x201E,0x2026,0x2020,0x2021,0x0000,0x2030,0x0000,0x2039,0x0000,0x00A8,0x02C7,0x00B8, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x0000,0x2122,0x0000,0x203A,0x0000,0x00AF,0x02DB,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x0000,0x00A6,0x00A7,0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6, /*B0*/
    /*C0*/ 0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B, /*C0*/
    /*D0*/ 0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF, /*D0*/
    /*E0*/ 0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C, /*E0*/
    /*F0*/ 0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x02D9  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_WIN1258_To_Unicode[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x20AC,0x0000,0x201A,0x0192,0x201E,0x2026,0x2020,0x2021,0x02C6,0x2030,0x0000,0x2039,0x0152,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x2018,0x2019,0x201C,0x201D,0x2022,0x2013,0x2014,0x02DC,0x2122,0x0000,0x203A,0x0153,0x0000,0x0000,0x0178, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x0300,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x0110,0x00D1,0x0309,0x00D3,0x00D4,0x01A0,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x01AF,0x0303,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x0301,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x0111,0x00F1,0x0323,0x00F3,0x00F4,0x01A1,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x01B0,0x20AB,0x00FF  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_MACOSROMANWEST_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x007F, /*70*/
    /*80*/ 0x00C4,0x00C5,0x00C7,0x00C9,0x00D1,0x00D6,0x00DC,0x00E1,0x00E0,0x00E2,0x00E4,0x00E3,0x00E5,0x00E7,0x00E9,0x00E8, /*80*/
    /*90*/ 0x00EA,0x00EB,0x00ED,0x00EC,0x00EE,0x00EF,0x00F1,0x00F3,0x00F2,0x00F4,0x00F6,0x00F5,0x00FA,0x00F9,0x00FB,0x00FC, /*90*/
    /*A0*/ 0x2020,0x00B0,0x00A2,0x00A3,0x00A7,0x2022,0x00B6,0x00DF,0x00AE,0x00A9,0x2122,0x00B4,0x00A8,0x2260,0x00C6,0x00D8, /*A0*/
    /*B0*/ 0x221E,0x00B1,0x2264,0x2265,0x00A5,0x00B5,0x2202,0x2211,0x220F,0x03C0,0x222B,0x00AA,0x00BA,0x03A9,0x00E6,0x00F8, /*B0*/
    /*C0*/ 0x00BF,0x00A1,0x00AC,0x221A,0x0192,0x2248,0x2206,0x00AB,0x00BB,0x2026,0x00A0,0x00C0,0x00C3,0x00D5,0x0152,0x0153, /*C0*/
    /*D0*/ 0x2013,0x2014,0x201C,0x201D,0x2018,0x2019,0x00F7,0x25CA,0x00FF,0x0178,0x2044,0x20AC,0x2039,0x203A,0xFB01,0xFB02, /*D0*/
    /*E0*/ 0x2021,0x00B7,0x201A,0x201E,0x2030,0x00C2,0x00CA,0x00C1,0x00CB,0x00C8,0x00CD,0x00CE,0x00CF,0x00CC,0x00D3,0x00D4, /*E0*/
    /*F0*/ 0xF8FF,0x00D2,0x00DA,0x00DB,0x00D9,0x0131,0x02C6,0x02DC,0x00AF,0x02D8,0x02D9,0x02DA,0x00B8,0x02DD,0x02DB,0x02C7  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_1_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_2_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0104,0x02D8,0x0141,0x00A4,0x013D,0x015A,0x00A7,0x00A8,0x0160,0x015E,0x0164,0x0179,0x00AD,0x017D,0x017B, /*A0*/
    /*B0*/ 0x00B0,0x0105,0x02DB,0x0142,0x00B4,0x013E,0x015B,0x02C7,0x00B8,0x0161,0x015F,0x0165,0x017A,0x02DD,0x017E,0x017C, /*B0*/
    /*C0*/ 0x0154,0x00C1,0x00C2,0x0102,0x00C4,0x0139,0x0106,0x00C7,0x010C,0x00C9,0x0118,0x00CB,0x011A,0x00CD,0x00CE,0x010E, /*C0*/
    /*D0*/ 0x0110,0x0143,0x0147,0x00D3,0x00D4,0x0150,0x00D6,0x00D7,0x0158,0x016E,0x00DA,0x0170,0x00DC,0x00DD,0x0162,0x00DF, /*D0*/
    /*E0*/ 0x0155,0x00E1,0x00E2,0x0103,0x00E4,0x013A,0x0107,0x00E7,0x010D,0x00E9,0x0119,0x00EB,0x011B,0x00ED,0x00EE,0x010F, /*E0*/
    /*F0*/ 0x0111,0x0144,0x0148,0x00F3,0x00F4,0x0151,0x00F6,0x00F7,0x0159,0x016F,0x00FA,0x0171,0x00FC,0x00FD,0x0163,0x02D9  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_3_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0126,0x02D8,0x00A3,0x00A4,0x0000,0x0124,0x00A7,0x00A8,0x0130,0x015E,0x011E,0x0134,0x00AD,0x0000,0x017B, /*A0*/
    /*B0*/ 0x00B0,0x0127,0x00B2,0x00B3,0x00B4,0x00B5,0x0125,0x00B7,0x00B8,0x0131,0x015F,0x011F,0x0135,0x00BD,0x0000,0x017C, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x0000,0x00C4,0x010A,0x0108,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x0000,0x00D1,0x00D2,0x00D3,0x00D4,0x0120,0x00D6,0x00D7,0x011C,0x00D9,0x00DA,0x00DB,0x00DC,0x016C,0x015C,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x0000,0x00E4,0x010B,0x0109,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x0000,0x00F1,0x00F2,0x00F3,0x00F4,0x0121,0x00F6,0x00F7,0x011D,0x00F9,0x00FA,0x00FB,0x00FC,0x016D,0x015D,0x02D9  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_4_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0104,0x0138,0x0156,0x00A4,0x0128,0x013B,0x00A7,0x00A8,0x0160,0x0112,0x0122,0x0166,0x00AD,0x017D,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x0105,0x02DB,0x0157,0x00B4,0x0129,0x013C,0x02C7,0x00B8,0x0161,0x0113,0x0123,0x0167,0x014A,0x017E,0x014B, /*B0*/
    /*C0*/ 0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x012A, /*C0*/
    /*D0*/ 0x0110,0x0145,0x014C,0x0136,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x0168,0x016A,0x00DF, /*D0*/
    /*E0*/ 0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x012B, /*E0*/
    /*F0*/ 0x0111,0x0146,0x014D,0x0137,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x0169,0x016B,0x02D9  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_5_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0401,0x0402,0x0403,0x0404,0x0405,0x0406,0x0407,0x0408,0x0409,0x040A,0x040B,0x040C,0x00AD,0x040E,0x040F, /*A0*/
    /*B0*/ 0x0410,0x0411,0x0412,0x0413,0x0414,0x0415,0x0416,0x0417,0x0418,0x0419,0x041A,0x041B,0x041C,0x041D,0x041E,0x041F, /*B0*/
    /*C0*/ 0x0420,0x0421,0x0422,0x0423,0x0424,0x0425,0x0426,0x0427,0x0428,0x0429,0x042A,0x042B,0x042C,0x042D,0x042E,0x042F, /*C0*/
    /*D0*/ 0x0430,0x0431,0x0432,0x0433,0x0434,0x0435,0x0436,0x0437,0x0438,0x0439,0x043A,0x043B,0x043C,0x043D,0x043E,0x043F, /*D0*/
    /*E0*/ 0x0440,0x0441,0x0442,0x0443,0x0444,0x0445,0x0446,0x0447,0x0448,0x0449,0x044A,0x044B,0x044C,0x044D,0x044E,0x044F, /*E0*/
    /*F0*/ 0x2116,0x0451,0x0452,0x0453,0x0454,0x0455,0x0456,0x0457,0x0458,0x0459,0x045A,0x045B,0x045C,0x00A7,0x045E,0x045F  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_6_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0000,0x0000,0x0000,0x00A4,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x060C,0x00AD,0x0000,0x0000, /*A0*/
    /*B0*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x061B,0x0000,0x0000,0x0000,0x061F, /*B0*/
    /*C0*/ 0x0000,0x0621,0x0622,0x0623,0x0624,0x0625,0x0626,0x0627,0x0628,0x0629,0x062A,0x062B,0x062C,0x062D,0x062E,0x062F, /*C0*/
    /*D0*/ 0x0630,0x0631,0x0632,0x0633,0x0634,0x0635,0x0636,0x0637,0x0638,0x0639,0x063A,0x0000,0x0000,0x0000,0x0000,0x0000, /*D0*/
    /*E0*/ 0x0640,0x0641,0x0642,0x0643,0x0644,0x0645,0x0646,0x0647,0x0648,0x0649,0x064A,0x064B,0x064C,0x064D,0x064E,0x064F, /*E0*/
    /*F0*/ 0x0650,0x0651,0x0652,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_7_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x2018,0x2019,0x00A3,0x20AC,0x20AF,0x00A6,0x00A7,0x00A8,0x00A9,0x037A,0x00AB,0x00AC,0x00AD,0x0000,0x2015, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x0384,0x0385,0x0386,0x00B7,0x0388,0x0389,0x038A,0x00BB,0x038C,0x00BD,0x038E,0x038F, /*B0*/
    /*C0*/ 0x0390,0x0391,0x0392,0x0393,0x0394,0x0395,0x0396,0x0397,0x0398,0x0399,0x039A,0x039B,0x039C,0x039D,0x039E,0x039F, /*C0*/
    /*D0*/ 0x03A0,0x03A1,0x0000,0x03A3,0x03A4,0x03A5,0x03A6,0x03A7,0x03A8,0x03A9,0x03AA,0x03AB,0x03AC,0x03AD,0x03AE,0x03AF, /*D0*/
    /*E0*/ 0x03B0,0x03B1,0x03B2,0x03B3,0x03B4,0x03B5,0x03B6,0x03B7,0x03B8,0x03B9,0x03BA,0x03BB,0x03BC,0x03BD,0x03BE,0x03BF, /*E0*/
    /*F0*/ 0x03C0,0x03C1,0x03C2,0x03C3,0x03C4,0x03C5,0x03C6,0x03C7,0x03C8,0x03C9,0x03CA,0x03CB,0x03CC,0x03CD,0x03CE,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_8_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0000,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00D7,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00F7,0x00BB,0x00BC,0x00BD,0x00BE,0x0000, /*B0*/
    /*C0*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*C0*/
    /*D0*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x2017, /*D0*/
    /*E0*/ 0x05D0,0x05D1,0x05D2,0x05D3,0x05D4,0x05D5,0x05D6,0x05D7,0x05D8,0x05D9,0x05DA,0x05DB,0x05DC,0x05DD,0x05DE,0x05DF, /*E0*/
    /*F0*/ 0x05E0,0x05E1,0x05E2,0x05E3,0x05E4,0x05E5,0x05E6,0x05E7,0x05E8,0x05E9,0x05EA,0x0000,0x0000,0x200E,0x200F,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_9_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x00A4,0x00A5,0x00A6,0x00A7,0x00A8,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x00B4,0x00B5,0x00B6,0x00B7,0x00B8,0x00B9,0x00BA,0x00BB,0x00BC,0x00BD,0x00BE,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x011E,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x0130,0x015E,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x011F,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x0131,0x015F,0x00FF, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_10_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0104,0x0112,0x0122,0x012A,0x0128,0x0136,0x00A7,0x013B,0x0110,0x0160,0x0166,0x017D,0x00AD,0x016A,0x014A, /*A0*/
    /*B0*/ 0x00B0,0x0105,0x0113,0x0123,0x012B,0x0129,0x0137,0x00B7,0x013C,0x0111,0x0161,0x0167,0x017E,0x2015,0x016B,0x014B, /*B0*/
    /*C0*/ 0x0100,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x012E,0x010C,0x00C9,0x0118,0x00CB,0x0116,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x00D0,0x0145,0x014C,0x00D3,0x00D4,0x00D5,0x00D6,0x0168,0x00D8,0x0172,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF, /*D0*/
    /*E0*/ 0x0101,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x012F,0x010D,0x00E9,0x0119,0x00EB,0x0117,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x00F0,0x0146,0x014D,0x00F3,0x00F4,0x00F5,0x00F6,0x0169,0x00F8,0x0173,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x0138  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_11_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0E01,0x0E02,0x0E03,0x0E04,0x0E05,0x0E06,0x0E07,0x0E08,0x0E09,0x0E0A,0x0E0B,0x0E0C,0x0E0D,0x0E0E,0x0E0F, /*A0*/
    /*B0*/ 0x0E10,0x0E11,0x0E12,0x0E13,0x0E14,0x0E15,0x0E16,0x0E17,0x0E18,0x0E19,0x0E1A,0x0E1B,0x0E1C,0x0E1D,0x0E1E,0x0E1F, /*B0*/
    /*C0*/ 0x0E20,0x0E21,0x0E22,0x0E23,0x0E24,0x0E25,0x0E26,0x0E27,0x0E28,0x0E29,0x0E2A,0x0E2B,0x0E2C,0x0E2D,0x0E2E,0x0E2F, /*C0*/
    /*D0*/ 0x0E30,0x0E31,0x0E32,0x0E33,0x0E34,0x0E35,0x0E36,0x0E37,0x0E38,0x0E39,0x0E3A,0x0000,0x0000,0x0000,0x0000,0x0E3F, /*D0*/
    /*E0*/ 0x0E40,0x0E41,0x0E42,0x0E43,0x0E44,0x0E45,0x0E46,0x0E47,0x0E48,0x0E49,0x0E4A,0x0E4B,0x0E4C,0x0E4D,0x0E4E,0x0E4F, /*E0*/
    /*F0*/ 0x0E50,0x0E51,0x0E52,0x0E53,0x0E54,0x0E55,0x0E56,0x0E57,0x0E58,0x0E59,0x0E5A,0x0E5B,0x0000,0x0000,0x0000,0x0000  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_13_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x201D,0x00A2,0x00A3,0x00A4,0x201E,0x00A6,0x00A7,0x00D8,0x00A9,0x0156,0x00AB,0x00AC,0x00AD,0x00AE,0x00C6, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x201C,0x00B5,0x00B6,0x00B7,0x00F8,0x00B9,0x0157,0x00BB,0x00BC,0x00BD,0x00BE,0x00E6, /*B0*/
    /*C0*/ 0x0104,0x012E,0x0100,0x0106,0x00C4,0x00C5,0x0118,0x0112,0x010C,0x00C9,0x0179,0x0116,0x0122,0x0136,0x012A,0x013B, /*C0*/
    /*D0*/ 0x0160,0x0143,0x0145,0x00D3,0x014C,0x00D5,0x00D6,0x00D7,0x0172,0x0141,0x015A,0x016A,0x00DC,0x017B,0x017D,0x00DF, /*D0*/
    /*E0*/ 0x0105,0x012F,0x0101,0x0107,0x00E4,0x00E5,0x0119,0x0113,0x010D,0x00E9,0x017A,0x0117,0x0123,0x0137,0x012B,0x013C, /*E0*/
    /*F0*/ 0x0161,0x0144,0x0146,0x00F3,0x014D,0x00F5,0x00F6,0x00F7,0x0173,0x0142,0x015B,0x016B,0x00FC,0x017C,0x017E,0x2019  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_14_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x1E02,0x1E03,0x00A3,0x010A,0x010B,0x1E0A,0x00A7,0x1E80,0x00A9,0x1E82,0x1E0B,0x1EF2,0x00AD,0x00AE,0x0178, /*A0*/
    /*B0*/ 0x1E1E,0x1E1F,0x0120,0x0121,0x1E40,0x1E41,0x00B6,0x1E56,0x1E81,0x1E57,0x1E83,0x1E60,0x1EF3,0x1E84,0x1E85,0x1E61, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x0174,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x1E6A,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x0176,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x0175,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x1E6B,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x0177,0x00FF, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_15_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x00A1,0x00A2,0x00A3,0x20AC,0x00A5,0x0160,0x00A7,0x0161,0x00A9,0x00AA,0x00AB,0x00AC,0x00AD,0x00AE,0x00AF, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x00B2,0x00B3,0x017D,0x00B5,0x00B6,0x00B7,0x017E,0x00B9,0x00BA,0x00BB,0x0152,0x0153,0x0178,0x00BF, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x00C3,0x00C4,0x00C5,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x00D0,0x00D1,0x00D2,0x00D3,0x00D4,0x00D5,0x00D6,0x00D7,0x00D8,0x00D9,0x00DA,0x00DB,0x00DC,0x00DD,0x00DE,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x00E3,0x00E4,0x00E5,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x00F0,0x00F1,0x00F2,0x00F3,0x00F4,0x00F5,0x00F6,0x00F7,0x00F8,0x00F9,0x00FA,0x00FB,0x00FC,0x00FD,0x00FE,0x00FF, /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_CP_ISO_8859_16_To_UniChar[256] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x0001,0x0002,0x0003,0x0004,0x0005,0x0006,0x0007,0x0008,0x0009,0x000A,0x000B,0x000C,0x000D,0x000E,0x000F, /*00*/
    /*10*/ 0x0010,0x0011,0x0012,0x0013,0x0014,0x0015,0x0016,0x0017,0x0018,0x0019,0x001A,0x001B,0x001C,0x001D,0x001E,0x001F, /*10*/
    /*20*/ 0x0020,0x0021,0x0022,0x0023,0x0024,0x0025,0x0026,0x0027,0x0028,0x0029,0x002A,0x002B,0x002C,0x002D,0x002E,0x002F, /*20*/
    /*30*/ 0x0030,0x0031,0x0032,0x0033,0x0034,0x0035,0x0036,0x0037,0x0038,0x0039,0x003A,0x003B,0x003C,0x003D,0x003E,0x003F, /*30*/
    /*40*/ 0x0040,0x0041,0x0042,0x0043,0x0044,0x0045,0x0046,0x0047,0x0048,0x0049,0x004A,0x004B,0x004C,0x004D,0x004E,0x004F, /*40*/
    /*50*/ 0x0050,0x0051,0x0052,0x0053,0x0054,0x0055,0x0056,0x0057,0x0058,0x0059,0x005A,0x005B,0x005C,0x005D,0x005E,0x005F, /*50*/
    /*60*/ 0x0060,0x0061,0x0062,0x0063,0x0064,0x0065,0x0066,0x0067,0x0068,0x0069,0x006A,0x006B,0x006C,0x006D,0x006E,0x006F, /*60*/
    /*70*/ 0x0070,0x0071,0x0072,0x0073,0x0074,0x0075,0x0076,0x0077,0x0078,0x0079,0x007A,0x007B,0x007C,0x007D,0x007E,0x0000, /*70*/
    /*80*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*80*/
    /*90*/ 0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, /*90*/
    /*A0*/ 0x00A0,0x0104,0x0105,0x0141,0x20AC,0x201E,0x0160,0x00A7,0x0161,0x00A9,0x0218,0x00AB,0x0179,0x00AD,0x017A,0x017B, /*A0*/
    /*B0*/ 0x00B0,0x00B1,0x010C,0x0142,0x017D,0x201D,0x00B6,0x00B7,0x017E,0x010D,0x0219,0x00BB,0x0152,0x0153,0x0178,0x017C, /*B0*/
    /*C0*/ 0x00C0,0x00C1,0x00C2,0x0102,0x00C4,0x0106,0x00C6,0x00C7,0x00C8,0x00C9,0x00CA,0x00CB,0x00CC,0x00CD,0x00CE,0x00CF, /*C0*/
    /*D0*/ 0x0110,0x0143,0x00D2,0x00D3,0x00D4,0x0150,0x00D6,0x015A,0x0170,0x00D9,0x00DA,0x00DB,0x00DC,0x0118,0x021A,0x00DF, /*D0*/
    /*E0*/ 0x00E0,0x00E1,0x00E2,0x0103,0x00E4,0x0107,0x00E6,0x00E7,0x00E8,0x00E9,0x00EA,0x00EB,0x00EC,0x00ED,0x00EE,0x00EF, /*E0*/
    /*F0*/ 0x0111,0x0144,0x00F2,0x00F3,0x00F4,0x0151,0x00F6,0x015B,0x0171,0x00F9,0x00FA,0x00FB,0x00FC,0x0119,0x021B,0x00FF  /*F0*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short g_NonPrintedSymbsVisualization[32] = {
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
    /*00*/ 0x0000,0x263A,0x263B,0x2665,0x2666,0x2663,0x2660,0x2022,0x25D8,0x25CB,0x25D9,0x2642,0x2640,0x266A,0x266B,0x263C, /*00*/
    /*10*/ 0x25BA,0x25C4,0x2195,0x203C,0x00B6,0x00A7,0x25AC,0x21A8,0x2191,0x2193,0x2192,0x2190,0x221F,0x2194,0x25B2,0x25BC  /*10*/
    /*     00     01     02     03     04     05     06     07     08     09     0A     0B     0C     0D     0E     0F          */
};

static const unsigned short* g_SingleBytesTable[] = {
    0,
    g_CP_ISO_8859_1_To_UniChar,
    g_CP_ISO_8859_2_To_UniChar,
    g_CP_ISO_8859_3_To_UniChar,
    g_CP_ISO_8859_4_To_UniChar,
    g_CP_ISO_8859_5_To_UniChar,
    g_CP_ISO_8859_6_To_UniChar,
    g_CP_ISO_8859_7_To_UniChar,
    g_CP_ISO_8859_8_To_UniChar,
    g_CP_ISO_8859_9_To_UniChar,
    g_CP_ISO_8859_10_To_UniChar,
    g_CP_ISO_8859_11_To_UniChar,
    g_CP_ISO_8859_13_To_UniChar,
    g_CP_ISO_8859_14_To_UniChar,
    g_CP_ISO_8859_15_To_UniChar,
    g_CP_ISO_8859_16_To_UniChar,
    g_CP_OEM437_To_Unicode,
    g_CP_OEM737_To_Unicode,
    g_CP_OEM775_To_Unicode,
    g_CP_OEM850_To_Unicode,
    g_CP_OEM851_To_Unicode,
    g_CP_OEM852_To_Unicode,
    g_CP_OEM855_To_Unicode,
    g_CP_OEM857_To_Unicode,
    g_CP_OEM860_To_Unicode,
    g_CP_OEM861_To_Unicode,
    g_CP_OEM862_To_Unicode,
    g_CP_OEM863_To_Unicode,
    g_CP_OEM864_To_Unicode,
    g_CP_OEM865_To_Unicode,
    g_CP_OEM866_To_Unicode,
    g_CP_OEM869_To_Unicode,
    g_CP_WIN1250_To_Unicode,
    g_CP_WIN1251_To_Unicode,
    g_CP_WIN1252_To_Unicode,
    g_CP_WIN1253_To_Unicode,
    g_CP_WIN1254_To_Unicode,
    g_CP_WIN1255_To_Unicode,
    g_CP_WIN1256_To_Unicode,
    g_CP_WIN1257_To_Unicode,
    g_CP_WIN1258_To_Unicode,
    g_CP_MACOSROMANWEST_To_UniChar,
};
// clang-format on

static_assert(sizeof(g_SingleBytesTable) / sizeof(unsigned short *) ==
                  ENCODING_SINGLE_BYTES_LAST__ + 1,
              "");

#define Endian16_Swap(value)                                                                       \
    (((static_cast<uint16_t>((value)&0x00FF)) << 8) |                                              \
     ((static_cast<uint16_t>((value)&0xFF00)) >> 8))

static const uint16_t g_ReplacementCharacter = 0xFFFD; //  � character

void InterpretSingleByteBufferAsUniCharPreservingBufferSize(
    const unsigned char *_input,
    size_t _input_size,
    unsigned short *_output, // should be at least _input_size 16b words long
    int _codepage)
{
    if( _codepage < ENCODING_SINGLE_BYTES_FIRST__ || _codepage > ENCODING_SINGLE_BYTES_LAST__ ) {
        memset(_output, 0, sizeof(unsigned short) * _input_size);
        return;
    }

    auto *t = g_SingleBytesTable[_codepage];
    const unsigned char *end = _input + _input_size;
    while( _input < end )
        *(_output++) = t[*(_input++)];
}

void InterpretUTF8BufferAsUniCharPreservingBufferSize(
    const unsigned char *_input,
    size_t _input_size,
    unsigned short *_output, // should be at least _input_size 16b words long,
    unsigned short _stuffing_symb,
    unsigned short _bad_symb)
{
    const unsigned char *end = _input + _input_size;

    while( _input < end ) {
        unsigned char current = *_input;

        int sz = 0;

        // get symbol size in bytes
        if( (current & 0x80) == 0 )
            sz = 1; // single-byte
        else if( (current & 0xE0) == 0xC0 )
            sz = 2; // two-byte
        else if( (current & 0xF0) == 0xE0 )
            sz = 3; // three-byte
        else if( (current & 0xF8) == 0xF0 )
            sz = 4; // four-byte
        else {
            // malformed!

            // skip current character and move further
            *_output = _bad_symb;
            ++_input;
            ++_output;
            continue;
        }

        if( sz == 1 ) {
            // just out current symbol
            if( current >= 32 )
                *_output = current;
            else
                *_output = g_NonPrintedSymbsVisualization[current];
            ++_input;
            ++_output;
            continue;
        }

        // try to extract a sequence

        for( int i = 1; i < sz; ++i ) {
            // check for an unexpected end of buffer
            if( _input + i == end ) {
                // just fill output as bad
                for( int z = 0; z < i; ++z ) {
                    ++_input;
                    *_output = _bad_symb;
                    ++_output;
                }
                goto goon;
            }

            current = *(_input + i);

            // check for malformed sequence
            if( (current & 0xC0) != 0x80 ) {
                // bad, bad sequence!

                // skip the heading character and move further
                *_output = _bad_symb;
                ++_input;
                ++_output;
                goto goon;
            }
        }

        // seems that sequence is ok
        if( sz == 2 ) {
            unsigned char high = *_input;
            unsigned char low = *(_input + 1);
            unsigned short out = static_cast<unsigned short>(
                ((static_cast<unsigned short>(high & 0x1F)) << 6) | (low & 0x3F));

            *_output = out;
            ++_output;
            *_output = _stuffing_symb;
            ++_output;
            _input += 2;
            continue;
        }
        else if( sz == 3 ) {
            unsigned char _1 = *_input;
            unsigned char _2 = *(_input + 1);
            unsigned char _3 = *(_input + 2);
            unsigned short out =
                static_cast<unsigned short>((static_cast<unsigned short>(_1 & 0xF) << 12) |
                                            (static_cast<unsigned short>(_2 & 0x3F) << 6) |
                                            (static_cast<unsigned short>(_3 & 0x3F)));
            *_output = out;
            ++_output;
            *_output = _stuffing_symb;
            ++_output;
            *_output = _stuffing_symb;
            ++_output;
            _input += 3;
            continue;
        }
        else {
            // toooooo long for current implementation

            *_output = _bad_symb; // symbols that didn't fit into 16bits
            ++_output;
            ++_input;
            for( int i = 1; i < sz; ++i ) {
                *_output = _stuffing_symb;
                ++_output;
                ++_input;
            }
            continue;
        }
    goon:;
    }
}

void InterpretUTF8BufferAsUTF16(
    const uint8_t *_input,
    size_t _input_size,
    uint16_t *_output_buf, // should be at least _input_size 16b words long
    size_t *_output_sz,    // size of an output
    uint16_t _bad_symb     // something like '?' or U+FFFD
)
{
    const unsigned char *end = _input + _input_size;

    size_t total = 0;

    while( _input < end ) {
        unsigned char current = *_input;

        int sz = 0;

        // get symbol size in bytes
        if( (current & 0x80) == 0 )
            sz = 1; // single-byte
        else if( (current & 0xE0) == 0xC0 )
            sz = 2; // two-byte
        else if( (current & 0xF0) == 0xE0 )
            sz = 3; // three-byte
        else if( (current & 0xF8) == 0xF0 )
            sz = 4; // four-byte
        else {
            // malformed! - skip current character and move further
            *_output_buf = _bad_symb;
            ++_input;
            ++_output_buf;
            ++total;
            continue;
        }

        if( sz == 1 ) { // just out current symbol
            *_output_buf = current;
            ++_input;
            ++_output_buf;
            ++total;
            continue;
        }

        // try to extract a sequence

        // validate sequence
        for( int i = 1; i < sz; ++i ) {
            // check for an unexpected end of buffer
            if( _input + i == end ) {
                // just fill output as bad
                for( int z = 0; z < i; ++z ) {
                    ++_input;
                    *_output_buf = _bad_symb;
                    ++_output_buf;
                    ++total;
                }
                goto goon;
            }

            // check for malformed sequence
            if( (_input[i] & 0xC0) != 0x80 ) {
                // bad, bad sequence! - skip the heading character and move further
                *_output_buf = _bad_symb;
                ++_input;
                ++_output_buf;
                ++total;
                goto goon;
            }
        }

        // seems that sequence is ok
        if( sz == 2 ) {
            unsigned short _1 = _input[0] & 0x1F;
            unsigned short _2 = _input[1] & 0x3F;
            unsigned short out = static_cast<unsigned short>((_1 << 6) | _2);
            *(_output_buf++) = out;
            ++total;
            _input += 2;
            continue;
        }
        else if( sz == 3 ) {
            uint16_t _1 = _input[0] & 0x0F;
            uint16_t _2 = _input[1] & 0x3F;
            uint16_t _3 = _input[2] & 0x3F;
            unsigned short out = static_cast<unsigned short>((_1 << 12) | (_2 << 6) | _3);
            *(_output_buf++) = out;
            ++total;
            _input += 3;
            continue;
        }
        else if( sz == 4 ) {
            uint32_t out;
            uint32_t _1 = _input[0] & 0x07;
            uint32_t _2 = _input[1] & 0x3F;
            uint32_t _3 = _input[2] & 0x3F;
            uint32_t _4 = _input[3] & 0x3F;
            out = (_1 << 18) | (_2 << 12) | (_3 << 6) | _4;
            if( out < 0x10000 ) { // possibly malformed UTF8 (?)
                *(_output_buf++) = uint16_t(out);
                total += 1;
            }
            else {
                uint16_t ls = static_cast<unsigned short>(0xD800 + ((out - 0x010000) >> 10));
                uint16_t ts = static_cast<unsigned short>(0xDC00 + ((out - 0x010000) & 0x3FF));
                *(_output_buf++) = ls;
                *(_output_buf++) = ts;
                total += 2;
            }
            _input += 4;
            continue;
        }
        else
            assert(0);
    goon:;
    }

    *_output_sz = total;
}

void InterpretUTF8BufferAsIndexedUTF16(
    const unsigned char *_input,
    size_t _input_size,
    unsigned short *_output_buf, // should be at least _input_size 16b words long
    uint32_t *_indexes_buf,      // should be at least _input_size 32b words long
    size_t *_output_sz,          // size of an output
    unsigned short _bad_symb     // something like '?' or U+FFFD
)
{
    const unsigned char *end = _input + _input_size, *start = _input;

    size_t total = 0;

    while( _input < end ) {
        unsigned char current = *_input;

        int sz = 0;

        // get symbol size in bytes
        if( (current & 0x80) == 0 )
            sz = 1; // single-byte
        else if( (current & 0xE0) == 0xC0 )
            sz = 2; // two-byte
        else if( (current & 0xF0) == 0xE0 )
            sz = 3; // three-byte
        else if( (current & 0xF8) == 0xF0 )
            sz = 4; // four-byte
        else {
            // malformed!

            // skip current character and move further
            *_output_buf = _bad_symb;
            *_indexes_buf = static_cast<uint32_t>(_input - start);
            ++_indexes_buf;
            ++_input;
            ++_output_buf;
            ++total;
            continue;
        }

        if( sz == 1 ) {
            // just out current symbol
            *_output_buf = current;
            *_indexes_buf = static_cast<uint32_t>(_input - start);
            ++_indexes_buf;
            ++_input;
            ++_output_buf;
            ++total;

            continue;
        }

        // try to extract a sequence

        for( int i = 1; i < sz; ++i ) {
            // check for an unexpected end of buffer
            if( _input + i == end ) {
                // just fill output as bad
                for( int z = 0; z < i; ++z ) {
                    *_output_buf = _bad_symb;
                    *_indexes_buf = static_cast<uint32_t>(_input - start);
                    ++_indexes_buf;
                    ++_input;
                    ++_output_buf;
                    ++total;
                }
                goto goon;
            }

            current = *(_input + i);

            // check for malformed sequence
            if( (current & 0xC0) != 0x80 ) {
                // bad, bad sequence!

                // skip the heading character and move further
                *_output_buf = _bad_symb;
                *_indexes_buf = static_cast<uint32_t>(_input - start);
                ++_indexes_buf;
                ++_input;
                ++_output_buf;
                ++total;
                goto goon;
            }
        }

        // seems that sequence is ok
        if( sz == 2 ) {
            unsigned short high = *_input;
            unsigned short low = *(_input + 1);
            unsigned short out = static_cast<unsigned short>((((high & 0x1F)) << 6) | (low & 0x3F));

            *_output_buf = out;
            *_indexes_buf = static_cast<uint32_t>(_input - start);
            ++_indexes_buf;
            ++_output_buf;
            ++total;
            _input += 2;
            continue;
        }
        else if( sz == 3 ) {
            unsigned short _1 = *_input;
            unsigned short _2 = *(_input + 1);
            unsigned short _3 = *(_input + 2);
            unsigned short out = static_cast<unsigned short>((((_1 & 0xF)) << 12) |
                                                             (((_2 & 0x3F)) << 6) | (_3 & 0x3F));
            *_output_buf = out;
            *_indexes_buf = static_cast<uint32_t>(_input - start);
            ++_indexes_buf;
            ++_output_buf;
            ++total;
            _input += 3;
            continue;
        }
        else if( sz == 4 ) {
            const uint32_t _1 = _input[0] & 0x07;
            const uint32_t _2 = _input[1] & 0x3F;
            const uint32_t _3 = _input[2] & 0x3F;
            const uint32_t _4 = _input[3] & 0x3F;
            const uint32_t out = (_1 << 18) | (_2 << 12) | (_3 << 6) | _4;
            if( out < 0x10000 || // possibly malformed UTF8 (?)
                (out >= 0x30000U && out < 0xE0000U) ) {
                *(_output_buf++) = _bad_symb;
                *(_indexes_buf++) = static_cast<uint32_t>(_input - start);
                total += 1;
            }
            else {
                uint16_t ls = static_cast<unsigned short>(0xD800 + ((out - 0x010000) >> 10));
                uint16_t ts = static_cast<unsigned short>(0xDC00 + ((out - 0x010000) & 0x3FF));
                *(_output_buf++) = ls;
                *(_output_buf++) = ts;
                *(_indexes_buf++) = static_cast<uint32_t>(
                    _input -
                    start); // lead and trailing surrpairs chars will point at same byte position
                *(_indexes_buf++) = static_cast<uint32_t>(_input - start);
                total += 2;
            }

            _input += 4;
            continue;
        }
        else
            assert(0);
    goon:;
    }

    *_output_sz = total;
    //    *_output_buf = 0;
}

void InterpretUTF16LEBufferAsUniChar(
    const unsigned char *_input,
    size_t _input_size,
    unsigned short *_output_buf, // should be at least _input_size/2 16b words long
    size_t *_output_sz,          // size of an output
    unsigned short _bad_symb     // something like '?' or U+FFFD
)
{
    const uint16_t *cur = reinterpret_cast<const uint16_t *>(_input);
    const uint16_t *end = cur + _input_size / sizeof(uint16_t);

    unsigned total = 0;

    while( cur < end ) {
        uint16_t val = *cur;

        if( val <= 0xD7FF || val >= 0xE000 ) { // BMP - just use it
            *_output_buf++ = *cur++;
            total++;
        }
        else {                                     // need to check suggorate pair
            if( val >= 0xD800 && val <= 0xDBFF ) { // leading surrogate
                if( cur + 1 < end && *(cur + 1) >= 0xDC00 && *(cur + 1) <= 0xDFFF ) {
                    const uint32_t code_point = ((uint32_t(val) - 0xD800U) << 10) +
                                                uint32_t(*(cur + 1)) - 0xDC00U + 0x0010000U;
                    if( code_point >= 0x30000U && code_point < 0xE0000U ) {
                        // unassigned code point - treat as corrupted
                        *_output_buf++ = _bad_symb;
                        ++cur;
                        total++;
                    }
                    else {
                        // ok, normal surrogate
                        *_output_buf++ = *cur++;
                        *_output_buf++ = *cur++;
                        total += 2;
                    }
                }
                else { // corrupted surrogate
                    *_output_buf++ = _bad_symb;
                    ++cur;
                    total++;
                }
            }
            else {
                // trailing surrogate found - invalid situation
                *_output_buf++ = _bad_symb;
                ++cur;
                total++;
            }
        }
    }

    *_output_sz = total;
}

void InterpretUTF16BEBufferAsUniChar(
    const unsigned char *_input,
    size_t _input_size,
    unsigned short *_output_buf, // should be at least _input_size/2 16b words long
    size_t *_output_sz,          // size of an output
    unsigned short _bad_symb     // something like '?' or U+FFFD
)
{
    const uint16_t *cur = reinterpret_cast<const uint16_t *>(_input);
    const uint16_t *end = cur + _input_size / sizeof(uint16_t);

    unsigned total = 0;

    while( cur < end ) {
        uint16_t val = static_cast<unsigned short>(Endian16_Swap(*cur));

        if( val <= 0xD7FF || val >= 0xE000 ) { // BMP - just use it
            *_output_buf++ = val;
            cur++;
            total++;
        }
        else {                                     // need to check suggorate pair
            if( val >= 0xD800 && val <= 0xDBFF ) { // leading surrogate
                if( cur + 1 < end ) {
                    uint16_t next = static_cast<unsigned short>(Endian16_Swap(*(cur + 1)));
                    if( next >= 0xDC00 && next <= 0xDFFF ) {
                        const uint32_t code_point = ((uint32_t(val) - 0xD800U) << 10) +
                                                    uint32_t(next) - 0xDC00U + 0x0010000U;
                        if( code_point >= 0x30000U && code_point < 0xE0000U ) {
                            // unassigned code point - treat as corrupted
                            *_output_buf++ = _bad_symb;
                            ++cur;
                            total++;
                        }
                        else {
                            // ok, normal surrogate
                            *_output_buf++ = val;
                            *_output_buf++ = next;
                            cur += 2;
                            total += 2;
                        }
                    }
                    else { // corrupted surrogate
                        *_output_buf++ = _bad_symb;
                        ++cur;
                        total++;
                    }
                }
                else { // torn surrogate
                    *_output_buf++ = _bad_symb;
                    ++cur;
                    total++;
                }
            }
            else {
                // trailing surrogate found - invalid situation
                *_output_buf++ = _bad_symb;
                ++cur;
                total++;
            }
        }
    }

    *_output_sz = total;
}

void InterpretUnicharsAsUTF8(const uint16_t *_input,
                             size_t _input_chars,
                             unsigned char *_output,
                             size_t _output_size,
                             size_t &_output_result,
                             size_t *_input_chars_eaten)
{
    const uint16_t *cur = _input;
    const uint16_t *end = cur + _input_chars;
    unsigned char *output = _output;

    if( _input_chars_eaten )
        *_input_chars_eaten = 0;

    if( _input == nullptr || _output == nullptr ) {
        _output_result = 0;
        return;
    }
    if( _output_size == 1 ) {
        _output[0] = _output_result = 0;
        return;
    }
    else if( _output_size == 0 ) {
        _output_result = 0;
        return;
    }

    size_t output_sz_left = _output_size;

    while( cur < end ) {
        uint16_t val = *cur;
        uint32_t codepoint;
        unsigned char utf8[4];
        unsigned utf8_sz, input_delta = 1;

        // decode UTF16 aka Unichars
        if( val <= 0xD7FF || (val >= 0xE000 && val <= 0xFFFF) ) // BMP - just use it
            codepoint = val;
        else {                                     // process surrogates
            if( val >= 0xD800 && val <= 0xDBFF ) { // leading surrogate
                if( cur + 1 < end ) {
                    uint16_t next = *(cur + 1);
                    if( next >= 0xDC00 && next <= 0xDFFF ) { // ok, normal surrogates
                        codepoint = (((val - 0xD800) << 10) + (next - 0xDC00) + 0x0010000);
                        input_delta = 2;
                    }
                    else // corrupted surrogate - without trailing
                        codepoint = g_ReplacementCharacter;
                }
                else // torn surrogate pair
                    codepoint = g_ReplacementCharacter;
            }
            else // trailing surrogate found - invalid situation
                codepoint = g_ReplacementCharacter;
        }

        // convert unicode code points into an array of UTF8 chars
        if( codepoint < 0x0080 ) {
            utf8_sz = 1;
            utf8[0] = static_cast<unsigned char>(codepoint);
        }
        else if( codepoint <= 0x7FF ) {
            utf8_sz = 2;
            utf8[0] = static_cast<unsigned char>((codepoint >> 6) + 0xC0);
            utf8[1] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else if( codepoint <= 0xFFFF ) {
            utf8_sz = 3;
            utf8[0] = static_cast<unsigned char>((codepoint >> 12) + 0xE0);
            utf8[1] = static_cast<unsigned char>(((codepoint >> 6) & 0x3F) + 0x80);
            utf8[2] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else if( codepoint <= 0x10FFFF ) {
            utf8_sz = 4;
            utf8[0] = static_cast<unsigned char>((codepoint >> 18) + 0xF0);
            utf8[1] = static_cast<unsigned char>(((codepoint >> 12) & 0x3F) + 0x80);
            utf8[2] = static_cast<unsigned char>(((codepoint >> 6) & 0x3F) + 0x80);
            utf8[3] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else { // fallback on error
            utf8_sz = 1;
            utf8[0] = '?';
        }

        // place UTF8 chars into output buffer
        if( output_sz_left > utf8_sz ) {
            cur += input_delta;
            output_sz_left -= utf8_sz;
            for( unsigned i = 0; i < utf8_sz; ++i )
                *(output++) = utf8[i];
        }
        else // we're out of output space
            break;
    }

    assert(output_sz_left > 0);
    _output_result = output - _output;
    *output = 0; // null-terminate output utf8 string
    if( _input_chars_eaten )
        *_input_chars_eaten = cur - _input;
}

void InterpretUnicodeAsUTF8(const uint32_t *_input,
                            size_t _input_chars,
                            unsigned char *_output,
                            size_t _output_size,
                            size_t &_output_result,
                            size_t *_input_chars_eaten)
{
    const uint32_t *cur = _input;
    const uint32_t *end = cur + _input_chars;
    unsigned char *output = _output;

    if( _input_chars_eaten )
        *_input_chars_eaten = 0;

    if( _input == nullptr || _output == nullptr ) {
        _output_result = 0;
        return;
    }
    if( _output_size == 1 ) {
        _output[0] = _output_result = 0;
        return;
    }
    else if( _output_size == 0 ) {
        _output_result = 0;
        return;
    }

    size_t output_sz_left = _output_size;

    while( cur < end ) {
        uint32_t codepoint = *cur; // we have codepoint from start
        unsigned char utf8[4];
        unsigned utf8_sz;

        // convert unicode code points into an array of UTF8 chars
        if( codepoint < 0x0080 ) {
            utf8_sz = 1;
            utf8[0] = static_cast<unsigned char>(codepoint);
        }
        else if( codepoint <= 0x7FF ) {
            utf8_sz = 2;
            utf8[0] = static_cast<unsigned char>((codepoint >> 6) + 0xC0);
            utf8[1] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else if( codepoint <= 0xFFFF ) {
            utf8_sz = 3;
            utf8[0] = static_cast<unsigned char>((codepoint >> 12) + 0xE0);
            utf8[1] = static_cast<unsigned char>(((codepoint >> 6) & 0x3F) + 0x80);
            utf8[2] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else if( codepoint <= 0x10FFFF ) {
            utf8_sz = 4;
            utf8[0] = static_cast<unsigned char>((codepoint >> 18) + 0xF0);
            utf8[1] = static_cast<unsigned char>(((codepoint >> 12) & 0x3F) + 0x80);
            utf8[2] = static_cast<unsigned char>(((codepoint >> 6) & 0x3F) + 0x80);
            utf8[3] = static_cast<unsigned char>((codepoint & 0x3F) + 0x80);
        }
        else { // fallback on error
            utf8_sz = 1;
            utf8[0] = '?';
        }

        // place UTF8 chars into output buffer
        if( output_sz_left > utf8_sz ) {
            cur++;
            output_sz_left -= utf8_sz;
            for( unsigned i = 0; i < utf8_sz; ++i )
                *(output++) = utf8[i];
        }
        else // we're out of output space
            break;
    }

    assert(output_sz_left > 0);
    _output_result = output - _output;
    *output = 0; // null-terminate output utf8 string
    if( _input_chars_eaten )
        *_input_chars_eaten = cur - _input;
}

namespace encodings {

size_t ScanUTF8ForValidSequenceLength(const unsigned char *_input, size_t _input_size) noexcept
{
    if( _input == nullptr || _input_size == 0 )
        return 0;

    int utf8_expected = 0;
    int utf8_pending = 0;
    int length = 0;

    for( size_t index = 0; index != _input_size; ++index ) {
        const unsigned c = _input[index];
        if( c > 0x7f ) {
            if( utf8_expected != 0 ) {
                if( (c & 0xC0) == 0x80 ) {
                    utf8_expected--;
                    utf8_pending++;
                    if( utf8_expected == 0 ) {
                        length += utf8_pending + 1;
                        utf8_pending = 0;
                    }
                }
                else {
                    break;
                }
            }
            else {
                if( (c & 0xe0) == 0xc0 ) {
                    utf8_expected = 1;
                }
                else if( (c & 0xf0) == 0xe0 ) {
                    utf8_expected = 2;
                }
                else if( (c & 0xf8) == 0xf0 ) {
                    utf8_expected = 3;
                }
                else
                    break;
            }
        }
        else {
            if( utf8_expected != 0 )
                break;
            length++;
        }
    }
    return static_cast<size_t>(length);
}

} // namespace encodings
